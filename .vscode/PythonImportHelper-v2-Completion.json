[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "environ",
        "description": "environ",
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "Menu",
        "importPath": "menu.models",
        "description": "menu.models",
        "isExtraImport": true,
        "detail": "menu.models",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "importPath": "menu.models",
        "description": "menu.models",
        "isExtraImport": true,
        "detail": "menu.models",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "importPath": "menu.models",
        "description": "menu.models",
        "isExtraImport": true,
        "detail": "menu.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "menu.views",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "menu.views",
        "description": "menu.views",
        "detail": "menu.views",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "root = environ.Path(__file__) - 2\nenv = environ.Env()\nenviron.Env.read_env(env.str(root(), \".env\"))\nBASE_DIR = root()\nSECRET_KEY = env.str(\"SECRET_KEY\")\nDEBUG = env.bool(\"DEBUG\", default=False)\nALLOWED_HOSTS = env.str(\"ALLOWED_HOSTS\", default=\"\").split(\" \")\n# Base\nINSTALLED_APPS = [\n    \"django.contrib.admin\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "env = environ.Env()\nenviron.Env.read_env(env.str(root(), \".env\"))\nBASE_DIR = root()\nSECRET_KEY = env.str(\"SECRET_KEY\")\nDEBUG = env.bool(\"DEBUG\", default=False)\nALLOWED_HOSTS = env.str(\"ALLOWED_HOSTS\", default=\"\").split(\" \")\n# Base\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = root()\nSECRET_KEY = env.str(\"SECRET_KEY\")\nDEBUG = env.bool(\"DEBUG\", default=False)\nALLOWED_HOSTS = env.str(\"ALLOWED_HOSTS\", default=\"\").split(\" \")\n# Base\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = env.str(\"SECRET_KEY\")\nDEBUG = env.bool(\"DEBUG\", default=False)\nALLOWED_HOSTS = env.str(\"ALLOWED_HOSTS\", default=\"\").split(\" \")\n# Base\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = env.bool(\"DEBUG\", default=False)\nALLOWED_HOSTS = env.str(\"ALLOWED_HOSTS\", default=\"\").split(\" \")\n# Base\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = env.str(\"ALLOWED_HOSTS\", default=\"\").split(\" \")\n# Base\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\n# Apps\nINSTALLED_APPS += [",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"config.urls\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = \"config.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = \"config.wsgi.application\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nMEDIA_TEST_ROOT = os.path.join(BASE_DIR, \"media/test/\")\n######################\n# LOCALIZATION\n######################\nLANGUAGE_CODE = \"ru-RU\"\nTIME_ZONE = \"UTC\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nMEDIA_TEST_ROOT = os.path.join(BASE_DIR, \"media/test/\")\n######################\n# LOCALIZATION\n######################\nLANGUAGE_CODE = \"ru-RU\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nMEDIA_TEST_ROOT = os.path.join(BASE_DIR, \"media/test/\")\n######################\n# LOCALIZATION\n######################\nLANGUAGE_CODE = \"ru-RU\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media/\")\nMEDIA_TEST_ROOT = os.path.join(BASE_DIR, \"media/test/\")\n######################\n# LOCALIZATION\n######################\nLANGUAGE_CODE = \"ru-RU\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_TEST_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_TEST_ROOT = os.path.join(BASE_DIR, \"media/test/\")\n######################\n# LOCALIZATION\n######################\nLANGUAGE_CODE = \"ru-RU\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = \"ru-RU\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('menu.urls', namespace='menu')),\n]",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "menu.migrations.0001_initial",
        "description": "menu.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Menu',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название меню')),",
        "detail": "menu.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "menu.migrations.0002_remove_menuitem_named_url_alter_menuitem_slug",
        "description": "menu.migrations.0002_remove_menuitem_named_url_alter_menuitem_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('menu', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='menuitem',\n            name='named_url',\n        ),\n        migrations.AlterField(",
        "detail": "menu.migrations.0002_remove_menuitem_named_url_alter_menuitem_slug",
        "documentation": {}
    },
    {
        "label": "draw_menu",
        "kind": 2,
        "importPath": "menu.templatetags.menu_tags",
        "description": "menu.templatetags.menu_tags",
        "peekOfCode": "def draw_menu(context, menu_name):\n    try:\n        menu_items = MenuItem.objects.filter(menu__name=menu_name).select_related(\n            \"parent\"\n        )\n    except Menu.DoesNotExist:\n        return {\"menu_items\": []}\n    request = context[\"request\"]\n    current_url = request.path\n    # Функция для построения дерева меня и определения активных пунктов",
        "detail": "menu.templatetags.menu_tags",
        "documentation": {}
    },
    {
        "label": "recursive_menu_template",
        "kind": 2,
        "importPath": "menu.templatetags.menu_tags",
        "description": "menu.templatetags.menu_tags",
        "peekOfCode": "def recursive_menu_template(context, menu_items, expanded_slugs, current_path):\n    print(\"recursive_menu_template called with:\")\n    print(\"  menu_items:\", menu_items)\n    print(\"  expanded_slugs:\", expanded_slugs)\n    print(\"  current_path:\", current_path)\n    output = \"<ul>\"\n    for item in menu_items:\n        is_expanded = item.slug in expanded_slugs\n        if is_expanded:\n            css_class = \"expanded\"",
        "detail": "menu.templatetags.menu_tags",
        "documentation": {}
    },
    {
        "label": "top_menu",
        "kind": 2,
        "importPath": "menu.templatetags.menu_tags",
        "description": "menu.templatetags.menu_tags",
        "peekOfCode": "def top_menu(expanded_slugs):\n    menu_items = MenuItem.objects.filter(parent=None)\n    return {\"menu_items\": menu_items, \"expanded_slugs\": expanded_slugs}",
        "detail": "menu.templatetags.menu_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "menu.templatetags.menu_tags",
        "description": "menu.templatetags.menu_tags",
        "peekOfCode": "register = template.Library()\n@register.inclusion_tag(\"menu/menu.html\", takes_context=True)\ndef draw_menu(context, menu_name):\n    try:\n        menu_items = MenuItem.objects.filter(menu__name=menu_name).select_related(\n            \"parent\"\n        )\n    except Menu.DoesNotExist:\n        return {\"menu_items\": []}\n    request = context[\"request\"]",
        "detail": "menu.templatetags.menu_tags",
        "documentation": {}
    },
    {
        "label": "MenuItemInline",
        "kind": 6,
        "importPath": "menu.admin",
        "description": "menu.admin",
        "peekOfCode": "class MenuItemInline(admin.TabularInline):\n    model = MenuItem\n    extra = 1\n@admin.register(Menu)\nclass MenuAdmin(admin.ModelAdmin):\n    inlines = [MenuItemInline]\n    list_display = ('name',) # Поля для отображения в списке\n    search_fields = ('name',)  # Добавляет поле для поиска\n@admin.register(MenuItem)\nclass MenuItemAdmin(admin.ModelAdmin):",
        "detail": "menu.admin",
        "documentation": {}
    },
    {
        "label": "MenuAdmin",
        "kind": 6,
        "importPath": "menu.admin",
        "description": "menu.admin",
        "peekOfCode": "class MenuAdmin(admin.ModelAdmin):\n    inlines = [MenuItemInline]\n    list_display = ('name',) # Поля для отображения в списке\n    search_fields = ('name',)  # Добавляет поле для поиска\n@admin.register(MenuItem)\nclass MenuItemAdmin(admin.ModelAdmin):\n    list_display = ('menu', 'title', 'parent', 'url', 'slug')  # Поля для отображения в списке\n    list_filter = ('menu', 'parent',)  # Фильтры справа\n    search_fields = ('menu', 'title', 'parent',)  # Добавляет поле для поиска\n    ordering = ('title',) # сортировка по имени",
        "detail": "menu.admin",
        "documentation": {}
    },
    {
        "label": "MenuItemAdmin",
        "kind": 6,
        "importPath": "menu.admin",
        "description": "menu.admin",
        "peekOfCode": "class MenuItemAdmin(admin.ModelAdmin):\n    list_display = ('menu', 'title', 'parent', 'url', 'slug')  # Поля для отображения в списке\n    list_filter = ('menu', 'parent',)  # Фильтры справа\n    search_fields = ('menu', 'title', 'parent',)  # Добавляет поле для поиска\n    ordering = ('title',) # сортировка по имени\n    fieldsets = (  # Разбивает форму редактирования на секции\n        (None, {\n            'fields': ('menu', 'title', 'parent')\n        }),\n        ('Дополнительно', {",
        "detail": "menu.admin",
        "documentation": {}
    },
    {
        "label": "MenuConfig",
        "kind": 6,
        "importPath": "menu.apps",
        "description": "menu.apps",
        "peekOfCode": "class MenuConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'menu'",
        "detail": "menu.apps",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "menu.models",
        "description": "menu.models",
        "peekOfCode": "class Menu(models.Model):\n    name = models.CharField(verbose_name=\"Название меню\", max_length=255, unique=True)\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name = \"Меню\"\n        verbose_name_plural = \"Меню\"\nclass MenuItem(models.Model):\n    menu = models.ForeignKey(\n        Menu, on_delete=models.CASCADE, related_name=\"items\", verbose_name=\"Меню\"",
        "detail": "menu.models",
        "documentation": {}
    },
    {
        "label": "MenuItem",
        "kind": 6,
        "importPath": "menu.models",
        "description": "menu.models",
        "peekOfCode": "class MenuItem(models.Model):\n    menu = models.ForeignKey(\n        Menu, on_delete=models.CASCADE, related_name=\"items\", verbose_name=\"Меню\"\n    )\n    title = models.CharField(max_length=200, verbose_name=\"Название пункта\")\n    url = models.CharField(\n        max_length=200, blank=True, null=True, verbose_name=\"URL (или именованный URL)\"\n    )\n    slug = models.SlugField(\n        max_length=200, unique=True, blank=True, null=True, verbose_name=\"Slug\"",
        "detail": "menu.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "menu.urls",
        "description": "menu.urls",
        "peekOfCode": "app_name = 'menu' # Namespace для именованных URL\nurlpatterns = [\n    path('menu/', menu_v.home, name='home'),\n    path('menu/<path:slug_path>/', menu_v.menu_page, name='menu_page'),\n]",
        "detail": "menu.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "menu.urls",
        "description": "menu.urls",
        "peekOfCode": "urlpatterns = [\n    path('menu/', menu_v.home, name='home'),\n    path('menu/<path:slug_path>/', menu_v.menu_page, name='menu_page'),\n]",
        "detail": "menu.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "menu.views",
        "description": "menu.views",
        "peekOfCode": "def home(request):\n    menu_items = MenuItem.objects.filter(parent=None)  # Только элементы верхнего уровня\n    return render(request, \"menu/home.html\", {\"menu_items\": menu_items})\ndef menu_page(request, slug_path):\n    slugs = slug_path.split(\"/\")\n    menu_item = get_object_or_404(MenuItem, slug=slugs[-1])\n    children = MenuItem.objects.filter(parent=menu_item)  # Получаем потомков\n    parent_url = menu_item.get_parent_url()\n    # Формируем список slug для развернутых элементов\n    expanded_slugs = slugs  # Все slug из URL должны быть развернуты",
        "detail": "menu.views",
        "documentation": {}
    },
    {
        "label": "menu_page",
        "kind": 2,
        "importPath": "menu.views",
        "description": "menu.views",
        "peekOfCode": "def menu_page(request, slug_path):\n    slugs = slug_path.split(\"/\")\n    menu_item = get_object_or_404(MenuItem, slug=slugs[-1])\n    children = MenuItem.objects.filter(parent=menu_item)  # Получаем потомков\n    parent_url = menu_item.get_parent_url()\n    # Формируем список slug для развернутых элементов\n    expanded_slugs = slugs  # Все slug из URL должны быть развернуты\n    return render(\n        request,\n        \"menu/menu_page.html\",",
        "detail": "menu.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]